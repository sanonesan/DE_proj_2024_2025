# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: ft_posting_f.sql
# pylint: disable-all
import dataclasses
import datetime
from typing import AsyncIterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from src.database.schemas.ds import models


CREATE_POST = """-- name: create_post \\:exec
INSERT INTO
    ds.FT_POSTING_F (
        oper_date,
        credit_account_rk,
        debet_account_rk,
        credit_amount,
        debet_amount
    )
VALUES
    (:p1, :p2, :p3, :p4, :p5)
"""


@dataclasses.dataclass()
class CreatePostParams:
    oper_date: datetime.date
    credit_account_rk: int
    debet_account_rk: int
    credit_amount: Optional[float]
    debet_amount: Optional[float]


CREATE_POST_RETURN = """-- name: create_post_return \\:one
INSERT INTO
    ds.FT_POSTING_F (
        oper_date,
        credit_account_rk,
        debet_account_rk,
        credit_amount,
        debet_amount
    )
VALUES
    (:p1, :p2, :p3, :p4, :p5)
RETURNING oper_date, credit_account_rk, debet_account_rk, credit_amount, debet_amount
"""


@dataclasses.dataclass()
class CreatePostReturnParams:
    oper_date: datetime.date
    credit_account_rk: int
    debet_account_rk: int
    credit_amount: Optional[float]
    debet_amount: Optional[float]


GET_POSTS = """-- name: get_posts \\:many
SELECT
    oper_date, credit_account_rk, debet_account_rk, credit_amount, debet_amount
FROM
    ds.FT_POSTING_F
"""


TRUNCATE_POSTING_TABLE = """-- name: truncate_posting_table \\:exec
TRUNCATE TABLE ds.FT_POSTING_F
"""


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_post(self, arg: CreatePostParams) -> None:
        await self._conn.execute(sqlalchemy.text(CREATE_POST), {
            "p1": arg.oper_date,
            "p2": arg.credit_account_rk,
            "p3": arg.debet_account_rk,
            "p4": arg.credit_amount,
            "p5": arg.debet_amount,
        })

    async def create_post_return(self, arg: CreatePostReturnParams) -> Optional[models.DsFtPostingF]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_POST_RETURN), {
            "p1": arg.oper_date,
            "p2": arg.credit_account_rk,
            "p3": arg.debet_account_rk,
            "p4": arg.credit_amount,
            "p5": arg.debet_amount,
        })).first()
        if row is None:
            return None
        return models.DsFtPostingF(
            oper_date=row[0],
            credit_account_rk=row[1],
            debet_account_rk=row[2],
            credit_amount=row[3],
            debet_amount=row[4],
        )

    async def get_posts(self) -> AsyncIterator[models.DsFtPostingF]:
        result = await self._conn.stream(sqlalchemy.text(GET_POSTS))
        async for row in result:
            yield models.DsFtPostingF(
                oper_date=row[0],
                credit_account_rk=row[1],
                debet_account_rk=row[2],
                credit_amount=row[3],
                debet_amount=row[4],
            )

    async def truncate_posting_table(self) -> None:
        await self._conn.execute(sqlalchemy.text(TRUNCATE_POSTING_TABLE))
