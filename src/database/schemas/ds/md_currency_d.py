# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: md_currency_d.sql
# pylint: disable-all
import dataclasses
import datetime
from typing import AsyncIterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from src.database.schemas.ds import models


CREATE_MD_CURRENCY = """-- name: create_md_currency \\:exec
INSERT INTO ds.MD_CURRENCY_D (
    currency_rk,
    data_actual_date,
    data_actual_end_date,
    currency_code,
    code_iso_char
) VALUES (
    :p1,
    :p2,
    :p3,
    :p4,
    :p5
)
ON CONFLICT (data_actual_date, currency_rk) 
DO UPDATE SET
    data_actual_end_date=EXCLUDED.data_actual_end_date,
    currency_code=EXCLUDED.currency_code,
    code_iso_char=EXCLUDED.code_iso_char
WHERE NOT (
    ds.MD_CURRENCY_D.data_actual_end_date=EXCLUDED.data_actual_end_date
    AND ds.MD_CURRENCY_D.currency_code=EXCLUDED.currency_code
    AND ds.MD_CURRENCY_D.code_iso_char=EXCLUDED.code_iso_char
)
"""


@dataclasses.dataclass()
class CreateMDCurrencyParams:
    currency_rk: int
    data_actual_date: datetime.date
    data_actual_end_date: Optional[datetime.date]
    currency_code: Optional[str]
    code_iso_char: Optional[str]


CREATE_MD_CURRENCY_RETURN = """-- name: create_md_currency_return \\:one
INSERT INTO ds.MD_CURRENCY_D (
    currency_rk,
    data_actual_date,
    data_actual_end_date,
    currency_code,
    code_iso_char
) VALUES (
    :p1,
    :p2,
    :p3,
    :p4,
    :p5
)
ON CONFLICT (data_actual_date, currency_rk) 
DO UPDATE SET
    data_actual_end_date=EXCLUDED.data_actual_end_date,
    currency_code=EXCLUDED.currency_code,
    code_iso_char=EXCLUDED.code_iso_char
WHERE NOT (
    ds.MD_CURRENCY_D.data_actual_end_date=EXCLUDED.data_actual_end_date
    AND ds.MD_CURRENCY_D.currency_code=EXCLUDED.currency_code
    AND ds.MD_CURRENCY_D.code_iso_char=EXCLUDED.code_iso_char
)
RETURNING currency_rk, data_actual_date, data_actual_end_date, currency_code, code_iso_char
"""


@dataclasses.dataclass()
class CreateMDCurrencyReturnParams:
    currency_rk: int
    data_actual_date: datetime.date
    data_actual_end_date: Optional[datetime.date]
    currency_code: Optional[str]
    code_iso_char: Optional[str]


GET_MD_CURRENCY = """-- name: get_md_currency \\:many
SELECT
    currency_rk, data_actual_date, data_actual_end_date, currency_code, code_iso_char
FROM
    ds.MD_CURRENCY_D
"""


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_md_currency(self, arg: CreateMDCurrencyParams) -> None:
        await self._conn.execute(sqlalchemy.text(CREATE_MD_CURRENCY), {
            "p1": arg.currency_rk,
            "p2": arg.data_actual_date,
            "p3": arg.data_actual_end_date,
            "p4": arg.currency_code,
            "p5": arg.code_iso_char,
        })

    async def create_md_currency_return(self, arg: CreateMDCurrencyReturnParams) -> Optional[models.DsMdCurrencyD]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_MD_CURRENCY_RETURN), {
            "p1": arg.currency_rk,
            "p2": arg.data_actual_date,
            "p3": arg.data_actual_end_date,
            "p4": arg.currency_code,
            "p5": arg.code_iso_char,
        })).first()
        if row is None:
            return None
        return models.DsMdCurrencyD(
            currency_rk=row[0],
            data_actual_date=row[1],
            data_actual_end_date=row[2],
            currency_code=row[3],
            code_iso_char=row[4],
        )

    async def get_md_currency(self) -> AsyncIterator[models.DsMdCurrencyD]:
        result = await self._conn.stream(sqlalchemy.text(GET_MD_CURRENCY))
        async for row in result:
            yield models.DsMdCurrencyD(
                currency_rk=row[0],
                data_actual_date=row[1],
                data_actual_end_date=row[2],
                currency_code=row[3],
                code_iso_char=row[4],
            )
